#!/hint/bash

# LLVM Version: 17.0.6-6
_pkgver_major=17
_pkgver_minor=0
_pkgver_patch=6
# Package Release Version
_pkgrel=7

# LLVM Installation Directory
_llvm_install_dir="/usr/lib/llvm$_pkgver_major"

pkgname=("llvm$_pkgver_major" "llvm$_pkgver_major-libs")    # DEPRECATED: Use only for vapoursynth-plugin-vsakarin-git
pkgver="$_pkgver_major.$_pkgver_minor.$_pkgver_patch"
pkgrel=$_pkgrel
arch=('x86_64')
url="https://llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=('cmake' 'clang' 'ninja' 'zlib' 'zstd' 'libffi' 'libedit' 'ncurses' 'libxml2' 'python' 'mold')
# checkdepends=('python-psutil')
options=('staticlibs' '!lto' '!debug')    # [LTO]: https://github.com/llvm/llvm-project/issues/57740
_source_base="https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver"
source=($_source_base/llvm-$pkgver.src.tar.xz{,.sig}
        $_source_base/cmake-$pkgver.src.tar.xz{,.sig}
        $_source_base/third-party-$pkgver.src.tar.xz{,.sig})

if [[ $_pkgver_major -eq 17 ]]; then
    _llvm_sha256sums="b638167da139126ca11917b6880207cc6e8f9d1cbb1a48d87d017f697ef78188"
    _cmake_sha256sums="807f069c54dc20cb47b21c1f6acafdd9c649f3ae015609040d6182cab01140f4"
    _third_party_sha256sums="3054d0a9c9375dab1a4539cc2cc45ab340341c5d71475f9599ba7752e222947b"
elif [[ $_pkgver_major -eq 16 ]]; then
    _llvm_sha256sums="e91db44d1b3bb1c33fcea9a7d1f2423b883eaa9163d3d56ca2aa6d2f0711bc29"
    _cmake_sha256sums="39d342a4161095d2f28fb1253e4585978ac50521117da666e2b1f6f28b62f514"
    _third_party_sha256sums="15f5b9aeeba938530af977d5f9205612737a091a7f0f6c8075df8723b7713f70"
fi
sha256sums=("$_llvm_sha256sums" "SKIP"
            "$_cmake_sha256sums" "SKIP"
            "$_third_party_sha256sums" "SKIP")
validpgpkeys=('474E22316ABF4785A88C6E8EA2C794A986419D8A'  # Tom Stellard <tstellar@redhat.com>
              'D574BD5D1D0E98895E3BF90044F2485E45D59042') # Tobias Hieta <tobias@hieta.se>

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components() {
    local target
    ninja -t targets | grep -Po 'install-\K.*(?=-stripped:)' | while read -r target; do
        case $target in
        llvm-libraries|distribution)
            continue
            ;;
        # shared libraries
        LLVM|LLVMgold)
            ;;
        # libraries needed for clang-tblgen
        LLVMDemangle|LLVMSupport|LLVMTableGen)
            ;;
        # testing libraries
        LLVMTestingAnnotations|LLVMTestingSupport)
            ;;
        # exclude static libraries
        LLVM*)
            continue
            ;;
        # exclude llvm-exegesis (doesn't seem useful without libpfm)
        llvm-exegesis)
            continue
            ;;
        esac
        echo $target
    done
}

prepare() {
    rename -v -- "-$pkgver.src" '' {cmake,third-party}-$pkgver.src
    cd llvm-$pkgver.src
    mkdir build

    # Remove CMake find module for zstd; breaks if out of sync with upstream zstd
    rm cmake/modules/Findzstd.cmake

    # Patch failing test when linking with LTO
    cat > ../fix_typeids_test_external_data_section.patch <<'EOP'
--- test/tools/llvm-shlib/typeids.test	2024-05-02 18:56:57.073814446 +0200
+++ test/tools/llvm-shlib/typeids_fix.test	2024-05-02 18:56:09.198898879 +0200
@@ -10,5 +10,5 @@
 # RUN: llvm-nm -C %llvmdylib | FileCheck %s
 # RUN: llvm-nm -C %llvmdylib | FileCheck %s --check-prefix=SAFETY-CHECK

-# CHECK-NOT: {{[^uvV]}} llvm::Any::TypeId
-# SAFETY-CHECK: {{[uvV]}} llvm::Any::TypeId
+# CHECK-NOT: {{[^uvVD]}} llvm::Any::TypeId
+# SAFETY-CHECK: {{[uvVD]}} llvm::Any::TypeId
EOP
    patch -N test/tools/llvm-shlib/typeids.test ../fix_typeids_test_external_data_section.patch
}

build() {
    cd llvm-$pkgver.src/build

    # Build only minimal debug info to reduce size
    CFLAGS=${CFLAGS/-g /-g1 }
    CXXFLAGS=${CXXFLAGS/-g /-g1 }

    local cmake_args=(
        -G Ninja
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX="$_llvm_install_dir"
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_SKIP_RPATH=ON
        -DLLVM_BINUTILS_INCDIR=/usr/include
        -DLLVM_BUILD_LLVM_DYLIB=ON
        -DLLVM_BUILD_TESTS=OFF
        -DLLVM_ENABLE_BINDINGS=OFF
        -DLLVM_ENABLE_FFI=ON
        -DLLVM_ENABLE_RTTI=ON
        -DLLVM_HOST_TRIPLE=$CHOST
        -DLLVM_TARGETS_TO_BUILD="X86"
        -DLLVM_INCLUDE_BENCHMARKS=OFF
        -DLLVM_INSTALL_UTILS=ON
        -DLLVM_LINK_LLVM_DYLIB=ON
        -DLLVM_USE_PERF=ON
        -DLLVM_USE_LINKER=mold
    )

    # Want to Build docs?
    # makedepends+=("python-sphinx")
    # cmake_args+=(-DLLVM_BUILD_DOCS=ON -DCMAKE_INSTALL_DOCDIR=share/doc -DLLVM_ENABLE_SPHINX=ON -DSPHINX_WARNINGS_AS_ERRORS=OFF)

    # Need Tests Enabled?
    # cmake_args+=(-DLLVM_BUILD_TESTS=ON)

    cmake .. "${cmake_args[@]}"
    local distribution_components=$(_get_distribution_components | paste -sd\;)
    test -n "$distribution_components"
    cmake_args+=(-DLLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

    cmake .. "${cmake_args[@]}"
    ninja
}

# check() {
#     cd llvm-$pkgver.src/build
#     LD_LIBRARY_PATH=$PWD/lib ninja check
# }

package_llvm17() {
    pkgdesc="Compiler infrastructure (LLVM $_pkgver_major)"
    depends=("llvm$_pkgver_major-libs" "perl")

    cd llvm-$pkgver.src/build

    DESTDIR="$pkgdir" ninja install-distribution

    # Include lit for running lit-based tests in other projects
    # makedepends+=('python-setuptools')
    # pushd ../utils/lit
    # python3 setup.py install --root="$pkgdir" -O1
    # popd

    # Remove generic llvm libraries
    # rm "$pkgdir/$_llvm_install_dir"/lib/lib{LLVM,LTO,Remarks}.so

    # The runtime libraries go into llvm$_pkgver_major-libs
    mv -f "$pkgdir/$_llvm_install_dir"/lib/libLLVM-{$_pkgver_major,$pkgver}.so "$srcdir/"
    # mv -f "$pkgdir/$_llvm_install_dir"/lib/lib{LLVM,LLVM-$_pkgver_major,LTO,Remarks}.so "$srcdir"
    mv -f "$pkgdir/$_llvm_install_dir"/lib/LLVMgold.so "$srcdir/"

    # Remove documentation sources, if -DLLVM_BUILD_DOCS=ON
    # rm -r "$pkgdir"/usr/lib/llvm$_pkgver_major/share/doc/llvm/html/{_sources,.buildinfo}

    # Create versioned symlinks from /usr/bin/ to $_llvm_install_dir/bin/
    install -d "$pkgdir/usr/bin"
    local _binary
    for _binary in "$pkgdir/$_llvm_install_dir"/bin/*; do
        local _basename=${_binary##*/}
        ln -s "../lib/llvm$_pkgver_major/bin/$_basename" "$pkgdir/usr/bin/$_basename-$_pkgver_major"
    done

    install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

package_llvm17-libs() {
    pkgdesc="LLVM $_pkgver_major runtime libraries"
    depends=('gcc-libs' 'zlib' 'zstd' 'libffi' 'libedit' 'ncurses' 'libxml2')

    install -d "$pkgdir/$_llvm_install_dir/lib"
    cp -P "$srcdir"/libLLVM-{$_pkgver_major,$pkgver}.so "$pkgdir/usr/lib/"
    ln -s "../../libLLVM-$_pkgver_major.so" "$pkgdir/$_llvm_install_dir/lib/libLLVM-$_pkgver_major.so"
    ln -s "../../libLLVM-$_pkgver_major.so" "$pkgdir/$_llvm_install_dir/lib/libLLVM-$pkgver.so"
    # cp -P "$srcdir"/lib{LLVM,LLVM-$_pkgver_major,LTO,Remarks}.so* "$pkgdir"/usr/lib/
    cp -P "$srcdir"/LLVMgold.so "$pkgdir/$_llvm_install_dir"/lib/

    # Symlinks from llvm install dir
    # local _so_prefix
    # for _so_prefix in libLLVM libLTO libRemarks; do
    #     # ln -s "../../$_so_prefix.so.$_pkgver_major.$_pkgver_minor" "$pkgdir/$_llvm_install_dir/lib/$_so_prefix.so"
    #     ln -s "../../$_so_prefix.so.$_pkgver_major.$_pkgver_minor" "$pkgdir/$_llvm_install_dir/lib/$_so_prefix.so.$_pkgver_major.$_pkgver_minor"
    # done
    # ln -s "../../libLLVM.so.$_pkgver_major.$_pkgver_minor" "$pkgdir/$_llvm_install_dir/lib/libLLVM-$_pkgver_major.so"

    install -Dm644 "$srcdir/llvm-$pkgver.src/LICENSE.TXT" \
        "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
